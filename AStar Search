import java.util.ArrayList;
import java.util.PriorityQueue;

public class finalDraft {

    public static myNode search(int numDucks, int numPos, int flagDuck, int maxEnergy) {
        ArrayList<myNode> reached = new ArrayList<myNode>();
        ArrayList<Duck> allDucks = new ArrayList<Duck>();
        int i = 0;
        Duck newDuck = new Duck(0, maxEnergy, maxEnergy, false);
        Duck goalDuck = new Duck(0, maxEnergy, maxEnergy, true);
        while (i < numDucks) {
            if (i != flagDuck) {
                allDucks.add(newDuck);
            } else {
                allDucks.add(goalDuck);
            }
            i++;
        }
        int cost = 0;
        myNode initNode = new myNode(allDucks, null, cost); // node <--Node(problem.initial)
        if (initNode.isGoalNode(flagDuck, numPos)) {
            System.out.println("Goal found");
            return initNode;
        }

        PriorityQueue<myNode> frontier = new PriorityQueue<myNode>((a, b) -> {
            int costA = a.getCost() + a.getHeuristic();
            int costB = b.getCost() + b.getHeuristic();
            return Integer.compare(costA, costB);
        });
        myNode clone = initNode.cloneNode(initNode);
        reached.add(clone);
        frontier.add(clone);

        while (!frontier.isEmpty()) {
            myNode newNode = frontier.poll();

            for (myNode x : newNode.expand(newNode, newNode.getDucks(), numPos)) {
                if (x.isGoalNode(flagDuck, numPos)) {
                    return x;
                }
                if (!reached.contains(x)) {
                    reached.add(x);
                    frontier.add(x);
                }
            }

        }
        return null;
    }

    public static void main(String[] args) {
        myNode x = search(4, 5, 1, 4);
        if (x == null) {
            System.out.println("No solution found");
        } else {
            System.out.println(x.toString());
        }
    }
}
